- Set up and Execution
  Code written with Python 2.7 (Anaconda distribution)
  Required packages/ modules
    - numpy
    - h5py
    - OpenCV 3 for Python (connected component with statistics)
  Setup:
    - estimateState is the entry point.
    - All files need to be in the same folder.
    
  Execution:
    - CLI
      - estimateState -h , prints help
      - Sample execution: Use 'data.h5' file to estimate state at 40th location.
        estimateState -f 'data.h5' -i 40
        
- Algorithm approach:
  see algorithm_approach.pdf
  
- Advantages and disadvantages
  
- Relevant materials, if used (books, papers, blogs, ...)

- Breakdown of time spent
  -H5PY file reading and data probing: ~2 hours
  -Research and browsing through papers: 3-4 hours over 2 days
    -I initially went down a rabbit hole of using probability distributions to define the obstacles.
    Read a lot of papers but they all seemed like overkill.
  -Finally decided on a Belief update with an Inverse Sensor Model and augmenting/ correcting that with connected component.
    This implementation only took about 4 hours over 2 days.
    
- Future directions you would take if you had more time
  -
-- What would you do with a few days? with a few weeks?
-- What if your algorithm needed to run in real time (20hz)?
-- Our simulated sensor data is very clean, how would you deal with
   noisy real world sensor data.
- Can your approach infer future states and if so how effective
  is it?

You should provide a testing script:
- Input arguments
    - path to hdf5 store containing raytraced laser scan
      images and ground truth images.
    - index of the frame to estimated. You will use the preceding 20 frames
      to make this estimate.
- Outputs:
    - Saves an the estimate output image.
    - Saves the error between the your estimate and the ground truth
    - Any other outputs you find interesting or useful
- The error metric used will be the sum of squared pixel distances between
  your output and the ground truth image.
